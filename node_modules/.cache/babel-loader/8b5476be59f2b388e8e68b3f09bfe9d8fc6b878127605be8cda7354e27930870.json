{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project sample\\\\SpeakNote Remind\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing token on app load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Set default authorization header\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Verify token and get user info\n      verifyToken();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const verifyToken = async () => {\n    try {\n      // You could add a /me endpoint to verify token and get user info\n      // For now, we'll just check if token exists\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Set user from localStorage or make API call\n        const userData = localStorage.getItem('user');\n        if (userData) {\n          setUser(JSON.parse(userData));\n        }\n      }\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('email', email);\n      formData.append('password', password);\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/login`, formData);\n      const {\n        access_token\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', access_token);\n      axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n\n      // Get user info (you might want to add a /me endpoint)\n      const userResponse = await axios.get(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/me`);\n      const userData = userResponse.data;\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      toast.success('Successfully logged in!');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login failed:', error);\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed. Please try again.';\n      toast.error(message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, password, fullName) => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/register`, {\n        email,\n        password,\n        full_name: fullName\n      });\n      const userData = response.data;\n\n      // Auto-login after registration\n      const loginSuccess = await login(email, password);\n      if (loginSuccess) {\n        toast.success('Account created successfully!');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration failed:', error);\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Registration failed. Please try again.';\n      toast.error(message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    delete axios.defaults.headers.common['Authorization'];\n    setUser(null);\n    toast.success('Logged out successfully');\n  };\n  const updateUser = userData => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        ...userData\n      };\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","defaults","headers","common","verifyToken","userData","JSON","parse","error","console","logout","login","email","password","formData","FormData","append","response","post","process","env","REACT_APP_API_URL","access_token","data","setItem","userResponse","get","stringify","success","_error$response","_error$response$data","message","detail","register","fullName","full_name","loginSuccess","_error$response2","_error$response2$data","removeItem","updateUser","updatedUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Project sample/SpeakNote Remind/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  full_name?: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  register: (email: string, password: string, fullName?: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  updateUser: (userData: Partial<User>) => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check for existing token on app load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Set default authorization header\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      // Verify token and get user info\r\n      verifyToken();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const verifyToken = async () => {\r\n    try {\r\n      // You could add a /me endpoint to verify token and get user info\r\n      // For now, we'll just check if token exists\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        // Set user from localStorage or make API call\r\n        const userData = localStorage.getItem('user');\r\n        if (userData) {\r\n          setUser(JSON.parse(userData));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Token verification failed:', error);\r\n      logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string): Promise<boolean> => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const formData = new FormData();\r\n      formData.append('email', email);\r\n      formData.append('password', password);\r\n      \r\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/login`, formData);\r\n      \r\n      const { access_token } = response.data;\r\n      \r\n      // Store token\r\n      localStorage.setItem('token', access_token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n      \r\n      // Get user info (you might want to add a /me endpoint)\r\n      const userResponse = await axios.get(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/me`);\r\n      const userData = userResponse.data;\r\n      \r\n      setUser(userData);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      \r\n      toast.success('Successfully logged in!');\r\n      return true;\r\n    } catch (error: any) {\r\n      console.error('Login failed:', error);\r\n      const message = error.response?.data?.detail || 'Login failed. Please try again.';\r\n      toast.error(message);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, password: string, fullName?: string): Promise<boolean> => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/auth/register`, {\r\n        email,\r\n        password,\r\n        full_name: fullName\r\n      });\r\n      \r\n      const userData = response.data;\r\n      \r\n      // Auto-login after registration\r\n      const loginSuccess = await login(email, password);\r\n      if (loginSuccess) {\r\n        toast.success('Account created successfully!');\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (error: any) {\r\n      console.error('Registration failed:', error);\r\n      const message = error.response?.data?.detail || 'Registration failed. Please try again.';\r\n      toast.error(message);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const updateUser = (userData: Partial<User>) => {\r\n    if (user) {\r\n      const updatedUser = { ...user, ...userData };\r\n      setUser(updatedUser);\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}